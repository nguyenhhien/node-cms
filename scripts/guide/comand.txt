*
redis connect: redis-cli -h 192.168.56.111
select 2
*
virtual box host ip: 10.0.2.2 (default gateway)
*
nvm: curl https://raw.githubusercontent.com/creationix/nvm/v0.17.2/install.sh | bash
*
create alias: alias node='node --harmony' in ~/bashrc (or put into global system wide setting /etc/bashrc)
if using nvm: then use: alias node='~/.nvm/v0.11.13/bin/node --harmony'
*
haproxy:
sudo add-apt-repository -y ppa:vbernat/haproxy-1.5
sudo apt-get update
sudo apt-get install -y haproxy
*
allow only RSA public key access:
add public key to ~/.ssh/authorized_keys to allow ssh public key access

disable password login: /etc/ssh/sshd_config to use public key instead:
ChallengeResponseAuthentication no
PasswordAuthentication no
UsePAM no

repload setting:
sudo /etc/init.d/ssh reload
*
VIM:
:set paste -> to paste mode.
*
VirtualBox:
assign static IP:
auto eth1
iface eth1 inet static
address 192.168.56.112
netmask 255.255.255.0
*
Ubuntu:
disable/remove GUI ubuntu desktop:
apt-get purge -y lightdm
reboot
Change hostname in /etc/hostname and /etc/hosts
*
For scale: upgrade directly to MariaDB Galera Cluster (TODO: check alternative for table locking)
Need at least 3 server for this
sudo apt-get remove --purge mariadb* (maria*)
install cluster using: http://programster.blogspot.sg/2014/08/ubuntu-1404-setup-mariadb-cluster-55x.html
primary node need to run first: sudo service mysql start --wsrep-new-cluster
NOTE: need single node write, multi-node read (to limit optimistic locking -- causing deadlock -- galera limitation)
Second: beware of auto-increment; which can cause replication fail -- need different auto-increment counter
Third: stale state (inconsistent ACID).
Conclusion: use for readonly; or need to separate read/write -> application complexity (thankfully; it has been handled by sequelize).
Still, use with care and only for high-scale app. And for app need high ACID, use single write, multi-read.
TODO: check single master, multi-slave setup (allow LOCK/UNLOCK table).
Galera Arbitrator: to prevent brain-slit error when there is even of node.
*
Restarting whole cluster:
set global wsrep_provider_options="pc.bootstrap=true"; in one node.
TODO: check easier way to restart both node (without forcing to delete /var/lib/mysql/grastate.dat)
*
Otherwise: just upgrade to MariaDB(single instance):
sudo apt-get remove --purge mysql*
sudo apt-get autoremove
sudo apt-get autoclean
Add MariaDB:
sudo apt-get install software-properties-common
sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db
sudo apt-get update && sudo apt-get install mariadb-server
(put default mariadb password: beaver)
*
Config haproxy with Galera Cluster
Need one user for haproxy_check (NO PASSWORD)
CREATE USER 'haproxy_check'@'192.168.56.%';
GRANT ALL PRIVILEGES ON *.* TO 'haproxy_check'@'192.168.56.%' WITH GRANT OPTION;
test to see if haproxy working:
mysql -h 127.0.0.1 -u root -P 33306 -p -e "show variables like 'server_id'";
*
Allow remote access: (Best practice is using different user with root privileges)
grant all privileges on *.* to 'root'@'%' IDENTIFIED BY 'beaver' with grant option;
grant all privileges on *.* to 'root'@'localhost' IDENTIFIED BY 'beaver' with grant option;
flush privileges;
*
For using node11, can create symbolic link:
sudo ln -s /home/ubuntu/.nvm/v0.11.13/bin/node /usr/local/bin/node
sudo ln -s /home/ubuntu/.nvm/v0.11.13/bin/npm /usr/local/bin/npm
*
Useful command:
sudo sh -c 'echo $PATH' -> list paths seen by sudo
/etc/profile for system wide variables -- sudo su + source /etc/profile to make change get effect (sudo invoke /etc/profile)
sudo -i for interactive login shell
*Connect to MyQL, Redis, Mongo in EC2
-MySQL:
mysql using public dns which will resolve as internal ip when using with EC2; so use it as server adapter config.
mysql -h rds1.cyjzxce0sqyz.ap-southeast-1.rds.amazonaws.com -P 3306 -u root -p (For password connect)
Download mysql-ssl-ca-cert.pem from amazon to connect using ssl.
-Redis:
redis: only local access redis-cli -h aws1.gzkvyj.0001.apse1.cache.amazonaws.com
-Mongo:
mongo by default only bind to port 27017, localhost (check its config file)
SSH tunel will be needed if you need to connect from outside.
When using with GUI, fill in ssh-host, ssh pem, username; and in local section; specify localhost, port 27017 as remote
host ip and listening port.
*Run with node forever
NODE_ENV=prod forever start -c "node --harmony" app.js
*SSL certificate:
-using openssl to generate certificate as normal
-for Elastic Load Balancing, however, we need to convert cert into PEM format.
openssl rsa -in server.key -text > private.pem
openssl x509 -inform PEM -in server.crt > public.pem
wherease server.key, and server.crt are one you generate using openssl.
(note heartbleed bug).
http://www.nczonline.net/blog/2012/08/15/setting-up-ssl-on-an-amazon-elastic-load-balancer/




